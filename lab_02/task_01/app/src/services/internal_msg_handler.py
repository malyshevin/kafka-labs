"""
    –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π. –ó–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π, –∞ —Ç–∞–∫–∂–µ —Ü–µ–Ω–∑—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
"""
import re
import faust
from services.utils import (
    logger,
    get_env,
)

app = faust.App(
    "external_message_handler",
    broker=get_env("KAFKA_BOOTSTRAP_SERVERS", "kafka://localhost:9092"),
    store=get_env("KAFKA_MEMORY_TYPE", "memory://")
)


class Message(faust.Record, serializer="json"):
    from_id: str
    to_id: str
    text: str


class BlockCommand(faust.Record, serializer="json"):
    user_id: str
    blocked_user_id: str
    action: str  # add –∏–ª–∏ remove


class WordCommand(faust.Record, serializer="json"):
    word: str
    action: str  # add –∏–ª–∏ remove


### –¢–∞–±–ª–∏—Ü—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è (Stateful Tables)

blocked_list_table = app.Table("blocked_list", default=lambda: set(), partitions=3)    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> set –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
banned_words_table = app.Table("banned_words", default=lambda: list(), partitions=3)   # —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤


### –ê–≥–µ–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.agent(app.topic("blocked_users", value_type=BlockCommand))
async def update_blocked_list(commands):
    async for cmd in commands:
        user_id_block_set = set(blocked_list_table[cmd.user_id])
    
        if cmd.action == "add":
            user_id_block_set.add(cmd.blocked_user_id)

        if cmd.action == "remove":
            user_id_block_set.discard(cmd.blocked_user_id)

        blocked_list_table[cmd.user_id] = user_id_block_set
        logger.info(f'üü© [Blocked user] {cmd.user_id} -> {blocked_list_table[cmd.user_id]}')
        yield


### –ê–≥–µ–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
@app.agent(app.topic("banned_words", value_type=WordCommand))
async def update_banned_words(commands):
    async for cmd in commands:
        words = set(banned_words_table["words"])

        if cmd.action == "add":
            words.add(cmd.word.lower())

        if cmd.action == "remove":
            words.discard(cmd.word.lower())

        banned_words_table["words"] = list(words)
        logger.info(f"üü© [Banned words] {banned_words_table['words']}")


### –¶–µ–Ω–∑—É—Ä–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def censor(text, banned):
    for w in banned:
        text = re.sub(r'(?i)'+re.escape(w), '*'*len(w), text)
    return text


### –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@app.agent(app.topic("messages", value_type=Message))
async def process_messages(messages):
    async for msg in messages:
        recipient_blocked = blocked_list_table.get(msg.to_id, set())

        if msg.from_id in recipient_blocked:
            logger.info(f"‚õîÔ∏è [Blocked users] {msg.from_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É {msg.to_id}. –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
            continue

        banned = set(banned_words_table["words"])
        censored = censor(msg.text, banned)

        filtered_message = Message(from_id=msg.from_id, to_id=msg.to_id, text=censored)
        await app.send("filtered_messages", value=filtered_message)

        logger.info(f"üü© [Filtered messages] {filtered_message}")


if __name__ == "__main__":
    app.main()
